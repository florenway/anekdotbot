from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import random
from config import TOKEN

# –®—É—Ç–∫–∏ –∏ –∞–Ω–µ–∫–¥–æ—Ç—ã
jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ OCT 31 == DEC 25.",
    "–ì—É–≥–ª: '–í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: –ø–æ–º–æ—â—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞'",
    "‚Äî –î–æ–∫—Ç–æ—Ä, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é. ‚Äî –° –∫–∞–∫–∏—Ö –ø–æ—Ä? ‚Äî –° –∫–∞–∫–∏—Ö –ø–æ—Ä —á—Ç–æ?",
    "–ö–æ–ª–æ–±–æ–∫ –ø–æ–≤–µ—Å–∏–ª—Å—è)"
]

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("üìú –ö–æ–º–∞–Ω–¥—ã", callback_data="help")],
        [InlineKeyboardButton("üòÇ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="joke")],
        [InlineKeyboardButton("üß† –†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ", callback_data="math")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

# –£—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã
equations = [
    ("2x = 10", "x = 5"),
    ("3x + 6 = 15", "x = 3"),
    ("x/2 = 4", "x = 8"),
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    return [
        [
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É", callback_data='joke'),
            InlineKeyboardButton("–†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ", callback_data='math')
        ],
        [
            InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data='about')
        ]
    ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–º–æ—â–∏
def get_help_keyboard():
    return [
        [
            InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–∞ /start", callback_data='start'),
            InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–∞ /help", callback_data='help'),
            InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–∞ /about", callback_data='about'),
            InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–∞ /joke", callback_data='joke_info'),
            InlineKeyboardButton("–ö–æ–º–∞–Ω–¥–∞ /math", callback_data='math_info')
        ]
    ]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
def get_back_button():
    return [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == 'joke':
        joke = random.choice(jokes)
        keyboard = get_back_button()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.answer()
        await query.edit_message_text(joke, reply_markup=reply_markup)
    elif query.data == 'math':
        eq, ans = random.choice(equations)
        options = [
            InlineKeyboardButton("x = 4", callback_data=f'answer_{ans}_false'),
            InlineKeyboardButton("x = 5", callback_data=f'answer_{ans}_true'),
            InlineKeyboardButton("x = 6", callback_data=f'answer_{ans}_false'),
            InlineKeyboardButton("x = 7", callback_data=f'answer_{ans}_false')
        ]
        keyboard = InlineKeyboardMarkup([options] + get_back_button())
        await query.answer()
        await query.edit_message_text(f"–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {eq}", reply_markup=keyboard)
    elif query.data == 'answer_x = 5_true':
        await query.answer()
        await query.edit_message_text("–í–µ—Ä–Ω–æ! –û—Ç–≤–µ—Ç: x = 5", reply_markup=InlineKeyboardMarkup(get_back_button()))
    elif query.data.startswith('answer_'):
        await query.answer()
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=InlineKeyboardMarkup(get_back_button()))
    elif query.data == 'start':
        await query.answer()
        keyboard = get_main_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç üòä –ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.", reply_markup=reply_markup)
    elif query.data == 'help':
        await query.answer()
        keyboard = get_help_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ\n"
            "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            "/joke - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É\n"
            "/math - –°–ª—É—á–∞–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º (–≤ —Å–ø–æ–π–ª–µ—Ä–µ)",
            reply_markup=reply_markup
        )
    elif query.data == 'about':
        await query.answer()
        await query.edit_message_text(
            "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º üöÄ GitHub: https://github.com/florenway",
            reply_markup=InlineKeyboardMarkup(get_back_button())
        )
    elif query.data == 'joke_info':
        await query.answer()
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ /joke –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "\"–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ OCT 31 == DEC 25.\"",
            reply_markup=InlineKeyboardMarkup(get_back_button())
        )
    elif query.data == 'math_info':
        await query.answer()
        await query.edit_message_text(
            "–ö–æ–º–∞–Ω–¥–∞ /math –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x = 10. –û—Ç–≤–µ—Ç—ã: x = 4, x = 5, x = 6, x = 7.",
            reply_markup=InlineKeyboardMarkup(get_back_button())
        )
    elif query.data == 'back':
        await query.answer()
        keyboard = get_main_keyboard()
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_keyboard()
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç üòä –ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_help_keyboard()
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/joke - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É\n"
        "/math - –°–ª—É—á–∞–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º (–≤ —Å–ø–æ–π–ª–µ—Ä–µ)",
        reply_markup=reply_markup
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", url="https://github.com/florenway")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º üöÄ", reply_markup=reply_markup)

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    joke = random.choice(jokes)
    keyboard = [
        [InlineKeyboardButton("–ï—â–µ –æ–¥–Ω—É —à—É—Ç–∫—É", callback_data="joke")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(joke, reply_markup=reply_markup)

async def math_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    eq, ans = random.choice(equations)
    options = [
        InlineKeyboardButton("x = 4", callback_data=f'answer_{ans}_false'),
        InlineKeyboardButton("x = 5", callback_data=f'answer_{ans}_true'),
        InlineKeyboardButton("x = 6", callback_data=f'answer_{ans}_false'),
        InlineKeyboardButton("x = 7", callback_data=f'answer_{ans}_false')
    ]
    keyboard = InlineKeyboardMarkup([options] + get_back_button())
    await update.message.reply_text(f"–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {eq}", reply_markup=keyboard)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    responses = {
        "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üëã",
        "–∫–∞–∫ –¥–µ–ª–∞": "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?",
        "—á—Ç–æ –¥–µ–ª–∞–µ—à—å": "–û–±—â–∞—é—Å—å —Å —Ç–æ–±–æ–π :)"
    }
    response = responses.get(text, "–Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–æ —É—á—É—Å—å üß†")
    await update.message.reply_text(response)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about_command))
    app.add_handler(CommandHandler("joke", joke_command))
    app.add_handler(CommandHandler("math", math_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(button))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
